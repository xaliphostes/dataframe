#include "TEST.h"
#include <dataframe/Serie.h>
#include <dataframe/utils/parallel_map.h>
#include <dataframe/pipe.h>
#include <dataframe/map.h>
#include <chrono>

TEST(ParallelMap, BasicOperation) {
    auto series = df::Serie<int>{1, 2, 3, 4, 5};
    
    auto result = df::parallel_map([](int x, uint32_t) { return x * 2; }, series);
    
    EXPECT_EQ(result.size(), 5);
    EXPECT_ARRAY_EQ(result.data(), std::vector<int>({2, 4, 6, 8, 10}));
}

TEST(ParallelMap, LargeSeries) {
    std::vector<double> large_data(100000);
    for (size_t i = 0; i < large_data.size(); ++i) {
        large_data[i] = static_cast<double>(i);
    }
    
    auto series = df::Serie<double>(large_data);
    
    auto start = std::chrono::high_resolution_clock::now();
    auto parallel_result = df::parallel_map(
        [](double x, uint32_t) { return std::sqrt(x); }, 
        series
    );
    auto parallel_end = std::chrono::high_resolution_clock::now();
    
    auto regular_result = df::map(
        [](double x, uint32_t) { return std::sqrt(x); }, 
        series
    );
    auto regular_end = std::chrono::high_resolution_clock::now();
    
    auto parallel_duration = std::chrono::duration_cast<std::chrono::milliseconds>
        (parallel_end - start).count();
    auto regular_duration = std::chrono::duration_cast<std::chrono::milliseconds>
        (regular_end - parallel_end).count();
    
    std::cout << "Parallel execution time: " << parallel_duration << "ms\n";
    std::cout << "Regular execution time: " << regular_duration << "ms\n";
    
    // Verify results are the same
    EXPECT_EQ(parallel_result.size(), regular_result.size());
    for (size_t i = 0; i < parallel_result.size(); ++i) {
        EXPECT_NEAR(parallel_result[i], regular_result[i], 1e-10);
    }
}

TEST(ParallelMap, MultiSeries) {
    auto series1 = df::Serie<double>{1.0, 2.0, 3.0, 4.0, 5.0};
    auto series2 = df::Serie<double>{0.1, 0.2, 0.3, 0.4, 0.5};
    
    auto result = df::parallel_map(
        [](double x, double y, uint32_t) { return x + y; },
        series1,
        series2
    );
    
    EXPECT_EQ(result.size(), 5);
    std::vector<double> expected{1.1, 2.2, 3.3, 4.4, 5.5};
    for (size_t i = 0; i < result.size(); ++i) {
        EXPECT_NEAR(result[i], expected[i], 1e-10);
    }
}

TEST(ParallelMap, PipeOperator) {
    auto series = df::Serie<int>{1, 2, 3, 4, 5};
    
    auto result = series | df::bind_parallel_map(
        [](int x, uint32_t) { return x * 2; }
    );
    
    EXPECT_EQ(result.size(), 5);
    EXPECT_ARRAY_EQ(result.data(), std::vector<int>({2, 4, 6, 8, 10}));
}

TEST(ParallelMap, ShortAlias) {
    auto series = df::Serie<int>{1, 2, 3, 4, 5};
    
    auto result = df::par_map([](int x, uint32_t) { return x * 2; }, series);
    
    EXPECT_EQ(result.size(), 5);
    EXPECT_ARRAY_EQ(result.data(), std::vector<int>({2, 4, 6, 8, 10}));
}

RUN_TESTS()